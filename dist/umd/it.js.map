{"version":3,"file":"it.js","sources":["../../src/util.ts","../../src/functions/uncurried.ts","../../src/functions/curried.ts","../../src/it.ts"],"sourcesContent":["/** Extracts an iterator from an iterable. */\nexport const unwrap = <T>(it: Iterable<T>): Iterator<T> =>\n  it[Symbol.iterator]()\n\n/** Creates an iterable from an iterator. */\nexport const wrap = <T>(it: Iterator<T>): Iterable<T> =>\n  ({ [Symbol.iterator]: () => it })\n\n/** Creates an iterable from a function. */\nexport const iter = <T>(next: () => IteratorResult<T>) =>\n  wrap({ next })\n\n/** Creates an iterator result with `done` set to true. */\nexport const done = <T>() =>\n  ({ done: true }) as IteratorResult<T>\n\n/** Creates an iterator result with specified `value`. */\nexport const value = <T>(value: T) =>\n  ({ value }) as IteratorResult<T>\n","// tslint:disable:only-arrow-functions\nimport { Callback, Reducer } from '../types'\nimport { unwrap, wrap, iter, done, value } from '../util'\n\n/** Calls a function for each value of an iterable. */\nexport function forEach<T>(it: Iterable<T>, fn: Callback<T, void>) {\n  let i = 0\n  for (const value of it)\n    fn(value, i++)\n}\n\n/** Reduces an iterable to a single value. */\nexport function reduce<T, U>(it: Iterable<T>, fn: Reducer<T, U>, first: U) {\n  let i = 0, acc = first\n  for (const value of it)\n    acc = fn(acc, value, i++)\n  return acc\n}\n\n/** Filters values of an iterable. */\nexport function* filter<T>(it: Iterable<T>, fn: Callback<T, boolean>) {\n  let i = 0\n  for (const value of it)\n    if (fn(value, i++))\n      yield value\n}\n\n/** Maps values of an iterable. */\nexport function* map<T, U>(it: Iterable<T>, fn: Callback<T, U>) {\n  let i = 0\n  for (const value of it)\n    yield fn(value, i++)\n}\n\n/** Concatenates multiple iterables to a single one. */\nexport function* concat<T>(...its: Iterable<T>[]) {\n  for (const it of its)\n    yield* it\n}\n\n/** Flattens an iterable. */\nexport function* flatten<T>(it: Iterable<Iterable<T>>) {\n  for (const value of it)\n    yield* value\n}\n\n/** Yields values from an iterable in cycle. */\nexport function* cycle<T>(it: Iterable<T>) {\n  for (;;)\n    yield* it\n}\n\n/** Repeatedly yields the same value. */\nexport function* repeat<T>(value: T) {\n  for (;;)\n    yield value\n}\n\n/** Loops a generator function. */\nexport function* loop<T>(fn: (index: number) => Iterable<T>) {\n  for (let i = 0;;)\n    yield* fn(i++)\n}\n\n/** Yields values generated by a function. */\nexport function* generate<T>(fn: (index: number) => T) {\n  for (let i = 0;;)\n    yield fn(i++)\n}\n\n/** Yields a sequence of values derived from previous values. */\nexport function* sequence<T>(fn: Callback<T, T>, first: T) {\n  for (let i = 0, value = first;; value = fn(value, i++))\n    yield value\n}\n\n/** Yields a sequence of monotonically increasing numbers. */\nexport function* range(start = 0, stop = Infinity, step = 1) {\n  for (let number = start; number < stop; number += step)\n    yield number\n}\n\n/** Yields a sequence of matches. */\nexport function* match(input: string, regexp: RegExp) {\n  for (let match; match = regexp.exec(input);)\n    yield match\n}\n\n/** Yields an iterable by chunks of specified size. */\nexport function* chunk<T>(it: Iterable<T>, size: number) {\n  for (let chunk; (chunk = [...take(it, size)]).length;)\n    yield chunk\n}\n\n/** Zips multiple iterables to a single one. */\nexport function* zip<T>(...its: Iterable<T>[]) {\n  const itsʹ = its.map(unwrap)\n  yield* iter(() => {\n    const rs = itsʹ.map(it => it.next())\n    const r = rs.find(r => r.done) || value(rs.map(r => r.value))\n    return r as IteratorResult<T[]>\n  })\n}\n\n/** Takes specified amount of values from an iterable. */\nexport function* take<T>(it: Iterable<T>, amount: number) {\n  let i = 0\n  const itʹ = unwrap(it)\n  yield* iter(() => i++ < amount ? itʹ.next() : done<T>())\n}\n\n/** Drops specified amount of values from an iterable. */\nexport function* drop<T>(it: Iterable<T>, amount: number) {\n  const itʹ = wrap(unwrap(it)) // always return the same iterator\n  for (const _ of take(itʹ, amount)); // noop\n  yield* itʹ\n}\n","import { Callback, Reducer } from '../types'\nimport * as uc from './uncurried'\n\n/** Calls a function for each value of an iterable. */\nexport const forEach = <T>(fn: Callback<T, void>) => (it: Iterable<T>) =>\n  uc.forEach(it, fn)\n\n/** Reduces an iterable to a single value. */\nexport const reduce = <T, U>(fn: Reducer<T, U>) => (first: U) => (it: Iterable<T>) =>\n  uc.reduce(it, fn, first)\n\n/** Filters values of an iterable. */\nexport const filter = <T>(fn: Callback<T, boolean>) => (it: Iterable<T>) =>\n  uc.filter(it, fn)\n\n/** Maps values of an iterable. */\nexport const map = <T, U>(fn: Callback<T, U>) => (it: Iterable<T>) =>\n  uc.map(it, fn)\n\n/** Yields a sequence of values derived from previous values. */\nexport const sequence = <T>(fn: Callback<T, T>) => (first: T) =>\n  uc.sequence(fn, first)\n\n/** Yields a sequence of monotonically increasing numbers. */\nexport const range = (start?: number) => (stop?: number) => (step?: number) =>\n  uc.range(start, stop, step)\n\n/** Yields a sequence of matches. */\nexport const match = (regexp: RegExp) => (input: string) =>\n  uc.match(input, regexp)\n\n/** Yields an iterable by chunks of specified size. */\nexport const chunk = (size: number) => <T>(it: Iterable<T>) =>\n  uc.chunk(it, size)\n\n/** Takes specified amount of values from an iterable. */\nexport const take = (amount: number) => <T>(it: Iterable<T>) =>\n  uc.take(it, amount)\n\n/** Drops specified amount of values from an iterable. */\nexport const drop = (amount: number) => <T>(it: Iterable<T>) =>\n  uc.drop(it, amount)\n\nexport { concat, flatten, cycle, repeat, loop, generate, zip } from './uncurried'\n","import { Callback, Reducer, Flatten } from './types'\nimport * as uc from './functions/uncurried'\nimport * as c from './functions/curried'\n\nexport const it = <T>(it: Iterable<T>) => new It(it)\n\nexport class It<T> implements Iterable<T> {\n  [Symbol.iterator]: () => Iterator<T>\n\n  static uncurried = uc\n  static curried = c\n\n  constructor(it: Iterable<T>) {\n    this[Symbol.iterator] = it[Symbol.iterator].bind(it)\n  }\n\n  /** Repeatedly yields the same value. */\n  static repeat<T>(value: T) {\n    return new It(uc.repeat(value))\n  }\n\n  /** Loops a generator function. */\n  static loop<T>(fn: (index: number) => Iterable<T>) {\n    return new It(uc.loop(fn))\n  }\n\n  /** Yields values generated by a function. */\n  static generate<T>(fn: (index: number) => T) {\n    return new It(uc.generate(fn))\n  }\n\n  /** Yields a sequence of values derived from previous values. */\n  static sequence<T>(fn: Callback<T, T>, first: T) {\n    return new It(uc.sequence(fn, first))\n  }\n\n  /** Yields a sequence of monotonically increasing numbers. */\n  static range(start?: number, stop?: number, step?: number) {\n    return new It(uc.range(start, stop, step))\n  }\n\n  /** Yields a sequence of matches. */\n  static match(input: string, regexp: RegExp) {\n    return new It(uc.match(input, regexp))\n  }\n\n  /** Casts the iterable to other data structure. */\n  cast<T>(fn: (it: this) => T) {\n    return fn(this)\n  }\n\n  /** Calls a function for each value of the iterable. */\n  forEach(fn: Callback<T, void>) {\n    uc.forEach(this, fn)\n  }\n\n  /** Reduces the iterable to a single value. */\n  reduce<U>(fn: Reducer<T, U>, first: U) {\n    return uc.reduce(this, fn, first)\n  }\n\n  /** Filters values of the iterable. */\n  filter(fn: Callback<T, boolean>) {\n    return new It(uc.filter(this, fn))\n  }\n\n  /** Maps values of the iterable. */\n  map<U>(fn: Callback<T, U>) {\n    return new It(uc.map(this, fn))\n  }\n\n  /** Concatenates multiple iterables to a single one. */\n  concat<U>(...its: Iterable<U>[]) {\n    return new It(uc.concat<T | U>(this, ...its))\n  }\n\n  /** Flattens the iterable. */\n  flatten() {\n    return new It(uc.flatten<Flatten<T>>(this as any))\n  }\n\n  /** Yields values from the iterable in cycle. */\n  cycle() {\n    return new It(uc.cycle(this))\n  }\n\n  /** Yields the iterable by chunks of specified size. */\n  chunk(size: number) {\n    return new It(uc.chunk(this, size))\n  }\n\n  /** Zips multiple iterables to a single one. */\n  zip<U>(...its: Iterable<U>[]) {\n    return new It(uc.zip<T | U>(this, ...its))\n  }\n\n  /** Takes specified amount of values from the iterable. */\n  take(amount: number) {\n    return new It(uc.take(this, amount))\n  }\n\n  /** Drops specified amount of values from the iterable. */\n  drop(amount: number) {\n    return new It(uc.drop(this, amount))\n  }\n}\n"],"names":["value","forEach","uc.forEach","reduce","uc.reduce","filter","uc.filter","map","uc.map","sequence","uc.sequence","range","uc.range","match","uc.match","chunk","uc.chunk","take","uc.take","drop","uc.drop","uc.repeat","uc.loop","uc.generate","uc.concat","uc.flatten","uc.cycle","uc.zip"],"mappings":";;;;;;EAAA;AACA,EAAO,MAAM,MAAM,GAAG,CAAI,EAAe,KACvC,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAA;EAEvB;AACA,EAAO,MAAM,IAAI,GAAG,CAAI,EAAe,MACpC,EAAE,CAAC,MAAM,CAAC,QAAQ,GAAG,MAAM,EAAE,EAAE,CAAC,CAAA;EAEnC;AACA,EAAO,MAAM,IAAI,GAAG,CAAI,IAA6B,KACnD,IAAI,CAAC,EAAE,IAAI,EAAE,CAAC,CAAA;EAEhB;AACA,EAAO,MAAM,IAAI,GAAG,OACjB,EAAE,IAAI,EAAE,IAAI,EAAE,CAAsB,CAAA;EAEvC;AACA,EAAO,MAAM,KAAK,GAAG,CAAI,KAAQ,MAC9B,EAAE,KAAK,EAAE,CAAsB,CAAA;;ECdlC;AACA,WAAgB,OAAO,CAAI,EAAe,EAAE,EAAqB;MAC/D,IAAI,CAAC,GAAG,CAAC,CAAA;MACT,KAAK,MAAMA,QAAK,IAAI,EAAE;UACpB,EAAE,CAACA,QAAK,EAAE,CAAC,EAAE,CAAC,CAAA;EAClB,CAAC;EAED;AACA,WAAgB,MAAM,CAAO,EAAe,EAAE,EAAiB,EAAE,KAAQ;MACvE,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,KAAK,CAAA;MACtB,KAAK,MAAMA,QAAK,IAAI,EAAE;UACpB,GAAG,GAAG,EAAE,CAAC,GAAG,EAAEA,QAAK,EAAE,CAAC,EAAE,CAAC,CAAA;MAC3B,OAAO,GAAG,CAAA;EACZ,CAAC;EAED;AACA,YAAiB,MAAM,CAAI,EAAe,EAAE,EAAwB;MAClE,IAAI,CAAC,GAAG,CAAC,CAAA;MACT,KAAK,MAAMA,QAAK,IAAI,EAAE;UACpB,IAAI,EAAE,CAACA,QAAK,EAAE,CAAC,EAAE,CAAC;cAChB,MAAMA,QAAK,CAAA;EACjB,CAAC;EAED;AACA,YAAiB,GAAG,CAAO,EAAe,EAAE,EAAkB;MAC5D,IAAI,CAAC,GAAG,CAAC,CAAA;MACT,KAAK,MAAMA,QAAK,IAAI,EAAE;UACpB,MAAM,EAAE,CAACA,QAAK,EAAE,CAAC,EAAE,CAAC,CAAA;EACxB,CAAC;EAED;AACA,YAAiB,MAAM,CAAI,GAAG,GAAkB;MAC9C,KAAK,MAAM,EAAE,IAAI,GAAG;UAClB,OAAO,EAAE,CAAA;EACb,CAAC;EAED;AACA,YAAiB,OAAO,CAAI,EAAyB;MACnD,KAAK,MAAMA,QAAK,IAAI,EAAE;UACpB,OAAOA,QAAK,CAAA;EAChB,CAAC;EAED;AACA,YAAiB,KAAK,CAAI,EAAe;MACvC;UACE,OAAO,EAAE,CAAA;EACb,CAAC;EAED;AACA,YAAiB,MAAM,CAAIA,QAAQ;MACjC;UACE,MAAMA,QAAK,CAAA;EACf,CAAC;EAED;AACA,YAAiB,IAAI,CAAI,EAAkC;MACzD,KAAK,IAAI,CAAC,GAAG,CAAC;UACZ,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAA;EAClB,CAAC;EAED;AACA,YAAiB,QAAQ,CAAI,EAAwB;MACnD,KAAK,IAAI,CAAC,GAAG,CAAC;UACZ,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAA;EACjB,CAAC;EAED;AACA,YAAiB,QAAQ,CAAI,EAAkB,EAAE,KAAQ;MACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAEA,QAAK,GAAG,KAAK,GAAGA,QAAK,GAAG,EAAE,CAACA,QAAK,EAAE,CAAC,EAAE,CAAC;UACpD,MAAMA,QAAK,CAAA;EACf,CAAC;EAED;AACA,YAAiB,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,GAAG,QAAQ,EAAE,IAAI,GAAG,CAAC;MACzD,KAAK,IAAI,MAAM,GAAG,KAAK,EAAE,MAAM,GAAG,IAAI,EAAE,MAAM,IAAI,IAAI;UACpD,MAAM,MAAM,CAAA;EAChB,CAAC;EAED;AACA,YAAiB,KAAK,CAAC,KAAa,EAAE,MAAc;MAClD,KAAK,IAAI,KAAK,EAAE,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;UACxC,MAAM,KAAK,CAAA;EACf,CAAC;EAED;AACA,YAAiB,KAAK,CAAI,EAAe,EAAE,IAAY;MACrD,KAAK,IAAI,KAAK,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,MAAM;UAClD,MAAM,KAAK,CAAA;EACf,CAAC;EAED;AACA,YAAiB,GAAG,CAAI,GAAG,GAAkB;MAC3C,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;MAC5B,OAAO,IAAI,CAAC;UACV,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,CAAA;UACpC,MAAM,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAA;UAC7D,OAAO,CAAwB,CAAA;OAChC,CAAC,CAAA;EACJ,CAAC;EAED;AACA,YAAiB,IAAI,CAAI,EAAe,EAAE,MAAc;MACtD,IAAI,CAAC,GAAG,CAAC,CAAA;MACT,MAAM,GAAG,GAAG,MAAM,CAAC,EAAE,CAAC,CAAA;MACtB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,GAAG,IAAI,EAAK,CAAC,CAAA;EAC1D,CAAC;EAED;AACA,YAAiB,IAAI,CAAI,EAAe,EAAE,MAAc;MACtD,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAA;MAC5B,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC;UAAC,CAAC;MACnC,OAAO,GAAG,CAAA;EACZ,CAAC;;;;;;;;;;;;;;;;;;;;;;ECjHD;AACA,QAAaC,SAAO,GAAG,CAAI,EAAqB,KAAK,CAAC,EAAe,KACnEC,OAAU,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;EAEpB;AACA,QAAaC,QAAM,GAAG,CAAO,EAAiB,KAAK,CAAC,KAAQ,KAAK,CAAC,EAAe,KAC/EC,MAAS,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,CAAA;EAE1B;AACA,QAAaC,QAAM,GAAG,CAAI,EAAwB,KAAK,CAAC,EAAe,KACrEC,MAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;EAEnB;AACA,QAAaC,KAAG,GAAG,CAAO,EAAkB,KAAK,CAAC,EAAe,KAC/DC,GAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;EAEhB;AACA,QAAaC,UAAQ,GAAG,CAAI,EAAkB,KAAK,CAAC,KAAQ,KAC1DC,QAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAA;EAExB;AACA,QAAaC,OAAK,GAAG,CAAC,KAAc,KAAK,CAAC,IAAa,KAAK,CAAC,IAAa,KACxEC,KAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;EAE7B;AACA,QAAaC,OAAK,GAAG,CAAC,MAAc,KAAK,CAAC,KAAa,KACrDC,KAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;EAEzB;AACA,QAAaC,OAAK,GAAG,CAAC,IAAY,KAAK,CAAI,EAAe,KACxDC,KAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;EAEpB;AACA,QAAaC,MAAI,GAAG,CAAC,MAAc,KAAK,CAAI,EAAe,KACzDC,IAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;EAErB;AACA,QAAaC,MAAI,GAAG,CAAC,MAAc,KAAK,CAAI,EAAe,KACzDC,IAAO,CAAC,EAAE,EAAE,MAAM,CAAC;;;;;;;;;;;;;;;;;;;;;;QCrCR,EAAE,GAAG,CAAI,EAAe,KAAK,IAAI,EAAE,CAAC,EAAE,CAAC,CAAA;AAEpD,QAAa,EAAE;MAMb,YAAY,EAAe;UACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;OACrD;;MAGD,OAAO,MAAM,CAAI,KAAQ;UACvB,OAAO,IAAI,EAAE,CAACC,MAAS,CAAC,KAAK,CAAC,CAAC,CAAA;OAChC;;MAGD,OAAO,IAAI,CAAI,EAAkC;UAC/C,OAAO,IAAI,EAAE,CAACC,IAAO,CAAC,EAAE,CAAC,CAAC,CAAA;OAC3B;;MAGD,OAAO,QAAQ,CAAI,EAAwB;UACzC,OAAO,IAAI,EAAE,CAACC,QAAW,CAAC,EAAE,CAAC,CAAC,CAAA;OAC/B;;MAGD,OAAO,QAAQ,CAAI,EAAkB,EAAE,KAAQ;UAC7C,OAAO,IAAI,EAAE,CAACb,QAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAA;OACtC;;MAGD,OAAO,KAAK,CAAC,KAAc,EAAE,IAAa,EAAE,IAAa;UACvD,OAAO,IAAI,EAAE,CAACE,KAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAA;OAC3C;;MAGD,OAAO,KAAK,CAAC,KAAa,EAAE,MAAc;UACxC,OAAO,IAAI,EAAE,CAACE,KAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;OACvC;;MAGD,IAAI,CAAI,EAAmB;UACzB,OAAO,EAAE,CAAC,IAAI,CAAC,CAAA;OAChB;;MAGD,OAAO,CAAC,EAAqB;UAC3BZ,OAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;OACrB;;MAGD,MAAM,CAAI,EAAiB,EAAE,KAAQ;UACnC,OAAOE,MAAS,CAAC,IAAI,EAAE,EAAE,EAAE,KAAK,CAAC,CAAA;OAClC;;MAGD,MAAM,CAAC,EAAwB;UAC7B,OAAO,IAAI,EAAE,CAACE,MAAS,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAA;OACnC;;MAGD,GAAG,CAAI,EAAkB;UACvB,OAAO,IAAI,EAAE,CAACE,GAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAA;OAChC;;MAGD,MAAM,CAAI,GAAG,GAAkB;UAC7B,OAAO,IAAI,EAAE,CAACgB,MAAS,CAAQ,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;OAC9C;;MAGD,OAAO;UACL,OAAO,IAAI,EAAE,CAACC,OAAU,CAAa,IAAW,CAAC,CAAC,CAAA;OACnD;;MAGD,KAAK;UACH,OAAO,IAAI,EAAE,CAACC,KAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;OAC9B;;MAGD,KAAK,CAAC,IAAY;UAChB,OAAO,IAAI,EAAE,CAACV,KAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAA;OACpC;;MAGD,GAAG,CAAI,GAAG,GAAkB;UAC1B,OAAO,IAAI,EAAE,CAACW,GAAM,CAAQ,IAAI,EAAE,GAAG,GAAG,CAAC,CAAC,CAAA;OAC3C;;MAGD,IAAI,CAAC,MAAc;UACjB,OAAO,IAAI,EAAE,CAACT,IAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAA;OACrC;;MAGD,IAAI,CAAC,MAAc;UACjB,OAAO,IAAI,EAAE,CAACE,IAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAA;OACrC;;EA/FM,YAAS,GAAG,EAAE,CAAA;EACd,UAAO,GAAG,CAAC,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}