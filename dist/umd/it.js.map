{"version":3,"file":"it.js","sources":["../../src/util.ts","../../src/functions/uncurried.ts","../../src/functions/curried.ts","../../src/it.ts"],"sourcesContent":["export const unwrap = <T>(it: Iterable<T>): Iterator<T> =>\n  it[Symbol.iterator]()\n\nexport const wrap = <T>(it: Iterator<T>): Iterable<T> =>\n  ({ [Symbol.iterator]: () => it })\n\nexport const next = <T>(next: () => IteratorResult<T>) =>\n  wrap({ next })\n","// tslint:disable:only-arrow-functions\nimport { unwrap, wrap, next } from '../util'\n\n/** Calls a function for each value of an iterable. */\nexport function forEach<T>(it: Iterable<T>, fn: (value: T, index: number) => void) {\n  let i = 0\n  for (const value of it)\n    fn(value, i++)\n}\n\n/** Reduces an iterable to a single value. */\nexport function reduce<T, U>(it: Iterable<T>, fn: (previous: U, current: T, index: number) => U, first: U) {\n  let i = 0, acc = first\n  for (const value of it)\n    acc = fn(acc, value, i++)\n  return acc\n}\n\n/** Filters values of an iterable. */\nexport function* filter<T>(it: Iterable<T>, fn: (value: T, index: number) => boolean) {\n  let i = 0\n  for (const value of it)\n    if (fn(value, i++))\n      yield value\n}\n\n/** Maps values of an iterable. */\nexport function* map<T, U>(it: Iterable<T>, fn: (value: T, index: number) => U) {\n  let i = 0\n  for (const value of it)\n    yield fn(value, i++)\n}\n\n/** Concatenates multiple iterables to a single one. */\nexport function* concat<T>(...its: Iterable<T>[]) {\n  for (const it of its)\n    yield* it\n}\n\n/** Repeatedly yields values from the same iterable. */\nexport function* repeat<T>(it: Iterable<T>) {\n  for (;;)\n    yield* it\n}\n\n/** Always yields the same value. */\nexport function* always<T>(value: T) {\n  for (;;)\n    yield value\n}\n\n/** Loops a generator function. */\nexport function* loop<T>(fn: (index: number) => Iterable<T>) {\n  for (let i = 0;;)\n    yield* fn(i++)\n}\n\n/** Yields values generated by a function. */\nexport function* generate<T>(fn: (index: number) => T) {\n  for (let i = 0;;)\n    yield fn(i++)\n}\n\n/** Yields a sequence of values derived from previous values. */\nexport function* sequence<T>(fn: (previous: T, index: number) => T, first: T) {\n  for (let i = 0, value = first;; value = fn(value, i++))\n    yield value\n}\n\n/** Yields a sequence of monotonically increasing numbers. */\nexport function* range(start = 0, stop = Infinity, step = 1) {\n  for (let number = start; number < stop; number += step)\n    yield number\n}\n\n/** Yields a sequence of matches. */\nexport function* match(input: string, regexp: RegExp) {\n  for (let match; match = regexp.exec(input);)\n    yield match\n}\n\n/** Takes some amount values from an iterable. */\nexport function* take<T>(it: Iterable<T>, amount: number) {\n  let i = 0\n  const itʹ = unwrap(it)\n  const done = { done: true } as IteratorResult<T>\n  yield* next(() => i++ < amount ? itʹ.next() : done)\n}\n\n/** Drops some amount values from an iterable. */\nexport function* drop<T>(it: Iterable<T>, amount: number) {\n  const itʹ = wrap(unwrap(it)) // always return the same iterator\n  for (const _ of take(itʹ, amount)); // noop\n  yield* itʹ\n}\n","import * as uc from './uncurried'\n\n/** Calls a function for each value of an iterable. */\nexport const forEach = <T>(fn: (value: T, index: number) => void) => (it: Iterable<T>) =>\n  uc.forEach(it, fn)\n\n/** Reduces an iterable to a single value. */\nexport const reduce = <T, U>(fn: (previous: U, current: T, index: number) => U) => (first: U) => (it: Iterable<T>) =>\n  uc.reduce(it, fn, first)\n\n/** Filters values of an iterable. */\nexport const filter = <T>(fn: (value: T, index: number) => boolean) => (it: Iterable<T>) =>\n  uc.filter(it, fn)\n\n/** Maps values of an iterable. */\nexport const map = <T, U>(fn: (value: T, index: number) => U) => (it: Iterable<T>) =>\n  uc.map(it, fn)\n\n/** Yields a sequence of values derived from previous values. */\nexport const sequence = <T>(fn: (previous: T, index: number) => T) => (first: T) =>\n  uc.sequence(fn, first)\n\n/** Yields a sequence of monotonically increasing numbers. */\nexport const range = (start?: number) => (stop?: number) => (step?: number) =>\n  uc.range(start, stop, step)\n\n/** Yields a sequence of matches. */\nexport const match = (regexp: RegExp) => (input: string) =>\n  uc.match(input, regexp)\n\n/** Takes some amount values from an iterable. */\nexport const take = (amount: number) => <T>(it: Iterable<T>) =>\n  uc.take(it, amount)\n\n/** Drops some amount values from an iterable. */\nexport const drop = (amount: number) => <T>(it: Iterable<T>) =>\n  uc.drop(it, amount)\n\nexport { concat, repeat, always, loop, generate } from './uncurried'\n","import { forEach, reduce, filter, map, concat, repeat, take, drop } from './functions/uncurried'\nimport { always, loop, generate, sequence, range, match } from './functions/uncurried'\nimport * as uncurried from './functions/uncurried'\nimport * as curried from './functions/curried'\n\nexport const it = <T>(it: Iterable<T>) => new It(it)\n\nexport class It<T> implements Iterable<T> {\n  [Symbol.iterator]: () => Iterator<T>\n\n  static uncurried = uncurried\n  static curried = curried\n\n  /** Always yields the same value. */\n  static always<T>(value: T) {\n    return new It(always(value))\n  }\n\n  /** Loops a generator function. */\n  static loop<T>(fn: (index: number) => Iterable<T>) {\n    return new It(loop(fn))\n  }\n\n  /** Yields values generated by a function. */\n  static generate<T>(fn: (index: number) => T) {\n    return new It(generate(fn))\n  }\n\n  /** Yields a sequence of values derived from previous values. */\n  static sequence<T>(fn: (previous: T, index: number) => T, first: T) {\n    return new It(sequence(fn, first))\n  }\n\n  /** Yields a sequence of monotonically increasing numbers. */\n  static range(start?: number, stop?: number, step?: number) {\n    return new It(range(start, stop, step))\n  }\n\n  /** Yields a sequence of matches. */\n  static match(input: string, regexp: RegExp) {\n    return new It(match(input, regexp))\n  }\n\n  constructor(it: Iterable<T>) {\n    this[Symbol.iterator] = it[Symbol.iterator].bind(it)\n  }\n\n  /** Casts the iterable to other data structure. */\n  cast<T>(fn: (it: this) => T) {\n    return fn(this)\n  }\n\n  /** Calls a function for each value of the iterable. */\n  forEach(fn: (value: T, index: number) => void) {\n    forEach(this, fn)\n  }\n\n  /** Reduces the iterable to a single value. */\n  reduce<U>(fn: (previous: U, current: T, index: number) => U, first: U) {\n    return reduce(this, fn, first)\n  }\n\n  /** Filters values of the iterable. */\n  filter(fn: (value: T, index: number) => boolean) {\n    return new It(filter(this, fn))\n  }\n\n  /** Maps values of the iterable. */\n  map<U>(fn: (value: T, index: number) => U) {\n    return new It(map(this, fn))\n  }\n\n  /** Concatenates multiple iterables to a single one. */\n  concat<U>(...its: Iterable<U>[]) {\n    return new It(concat<T | U>(this, ...its))\n  }\n\n  /** Repeatedly yields values from the iterable. */\n  repeat() {\n    return new It(repeat(this))\n  }\n\n  /** Takes some amount values from the iterable. */\n  take(amount: number) {\n    return new It(take(this, amount))\n  }\n\n  /** Drops some amount values from the iterable. */\n  drop(amount: number) {\n    return new It(drop(this, amount))\n  }\n}\n"],"names":["forEach","uc.forEach","reduce","uc.reduce","filter","uc.filter","map","uc.map","sequence","uc.sequence","range","uc.range","match","uc.match","take","uc.take","drop","uc.drop"],"mappings":"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"}