{"version":3,"file":"it.min.js","sources":["../../src/util.ts","../../src/functions/uncurried.ts","../../src/functions/curried.ts","../../src/it.ts"],"sourcesContent":["export const unwrap = <T>(it: Iterable<T>): Iterator<T> =>\n  it[Symbol.iterator]()\n\nexport const wrap = <T>(it: Iterator<T>): Iterable<T> =>\n  ({ [Symbol.iterator]: () => it })\n\nexport const next = <T>(next: () => IteratorResult<T>) =>\n  wrap({ next })\n","// tslint:disable:only-arrow-functions\nimport { unwrap, wrap, next } from '../util'\n\n/** Calls a function for each value of an iterable. */\nexport function forEach<T>(it: Iterable<T>, fn: (value: T, index: number) => void) {\n  let i = 0\n  for (const value of it)\n    fn(value, i++)\n}\n\n/** Reduces an iterable to a single value. */\nexport function reduce<T, U>(it: Iterable<T>, fn: (previous: U, current: T, index: number) => U, first: U) {\n  let i = 0, acc = first\n  for (const value of it)\n    acc = fn(acc, value, i++)\n  return acc\n}\n\n/** Filters values of an iterable. */\nexport function* filter<T>(it: Iterable<T>, fn: (value: T, index: number) => boolean) {\n  let i = 0\n  for (const value of it)\n    if (fn(value, i++))\n      yield value\n}\n\n/** Maps values of an iterable. */\nexport function* map<T, U>(it: Iterable<T>, fn: (value: T, index: number) => U) {\n  let i = 0\n  for (const value of it)\n    yield fn(value, i++)\n}\n\n/** Concatenates multiple iterables to a single one. */\nexport function* concat<T>(...its: Iterable<T>[]) {\n  for (const it of its)\n    yield* it\n}\n\n/** Repeatedly yields values from the same iterable. */\nexport function* repeat<T>(it: Iterable<T>) {\n  for (;;)\n    yield* it\n}\n\n/** Always yields the same value. */\nexport function* always<T>(value: T) {\n  for (;;)\n    yield value\n}\n\n/** Loops a generator function. */\nexport function* loop<T>(fn: (index: number) => Iterable<T>) {\n  for (let i = 0;;)\n    yield* fn(i++)\n}\n\n/** Yields values generated by a function. */\nexport function* generate<T>(fn: (index: number) => T) {\n  for (let i = 0;;)\n    yield fn(i++)\n}\n\n/** Yields a sequence of values derived from previous values. */\nexport function* sequence<T>(fn: (previous: T, index: number) => T, first: T) {\n  for (let i = 0, value = first;; value = fn(value, i++))\n    yield value\n}\n\n/** Yields a sequence of monotonically increasing numbers. */\nexport function* range(start = 0, stop = Infinity, step = 1) {\n  for (let number = start; number < stop; number += step)\n    yield number\n}\n\n/** Yields a sequence of matches. */\nexport function* match(input: string, regexp: RegExp) {\n  for (let match; match = regexp.exec(input);)\n    yield match\n}\n\n/** Takes some amount values from an iterable. */\nexport function* take<T>(it: Iterable<T>, amount: number) {\n  let i = 0\n  const itʹ = unwrap(it)\n  const done = { done: true } as IteratorResult<T>\n  yield* next(() => i++ < amount ? itʹ.next() : done)\n}\n\n/** Drops some amount values from an iterable. */\nexport function* drop<T>(it: Iterable<T>, amount: number) {\n  const itʹ = wrap(unwrap(it)) // always return the same iterator\n  for (const _ of take(itʹ, amount)); // noop\n  yield* itʹ\n}\n","import * as uc from './uncurried'\n\n/** Calls a function for each value of an iterable. */\nexport const forEach = <T>(fn: (value: T, index: number) => void) => (it: Iterable<T>) =>\n  uc.forEach(it, fn)\n\n/** Reduces an iterable to a single value. */\nexport const reduce = <T, U>(fn: (previous: U, current: T, index: number) => U) => (first: U) => (it: Iterable<T>) =>\n  uc.reduce(it, fn, first)\n\n/** Filters values of an iterable. */\nexport const filter = <T>(fn: (value: T, index: number) => boolean) => (it: Iterable<T>) =>\n  uc.filter(it, fn)\n\n/** Maps values of an iterable. */\nexport const map = <T, U>(fn: (value: T, index: number) => U) => (it: Iterable<T>) =>\n  uc.map(it, fn)\n\n/** Yields a sequence of values derived from previous values. */\nexport const sequence = <T>(fn: (previous: T, index: number) => T) => (first: T) =>\n  uc.sequence(fn, first)\n\n/** Yields a sequence of monotonically increasing numbers. */\nexport const range = (start?: number) => (stop?: number) => (step?: number) =>\n  uc.range(start, stop, step)\n\n/** Yields a sequence of matches. */\nexport const match = (regexp: RegExp) => (input: string) =>\n  uc.match(input, regexp)\n\n/** Takes some amount values from an iterable. */\nexport const take = (amount: number) => <T>(it: Iterable<T>) =>\n  uc.take(it, amount)\n\n/** Drops some amount values from an iterable. */\nexport const drop = (amount: number) => <T>(it: Iterable<T>) =>\n  uc.drop(it, amount)\n\nexport { concat, repeat, always, loop, generate } from './uncurried'\n","import { forEach, reduce, filter, map, concat, repeat, take, drop } from './functions/uncurried'\nimport { always, loop, generate, sequence, range, match } from './functions/uncurried'\nimport * as uncurried from './functions/uncurried'\nimport * as curried from './functions/curried'\n\nexport const it = <T>(it: Iterable<T>) => new It(it)\n\nexport class It<T> implements Iterable<T> {\n  [Symbol.iterator]: () => Iterator<T>\n\n  static uncurried = uncurried\n  static curried = curried\n\n  /** Always yields the same value. */\n  static always<T>(value: T) {\n    return new It(always(value))\n  }\n\n  /** Loops a generator function. */\n  static loop<T>(fn: (index: number) => Iterable<T>) {\n    return new It(loop(fn))\n  }\n\n  /** Yields values generated by a function. */\n  static generate<T>(fn: (index: number) => T) {\n    return new It(generate(fn))\n  }\n\n  /** Yields a sequence of values derived from previous values. */\n  static sequence<T>(fn: (previous: T, index: number) => T, first: T) {\n    return new It(sequence(fn, first))\n  }\n\n  /** Yields a sequence of monotonically increasing numbers. */\n  static range(start?: number, stop?: number, step?: number) {\n    return new It(range(start, stop, step))\n  }\n\n  /** Yields a sequence of matches. */\n  static match(input: string, regexp: RegExp) {\n    return new It(match(input, regexp))\n  }\n\n  constructor(it: Iterable<T>) {\n    this[Symbol.iterator] = it[Symbol.iterator].bind(it)\n  }\n\n  /** Casts the iterable to other data structure. */\n  cast<T>(fn: (it: this) => T) {\n    return fn(this)\n  }\n\n  /** Calls a function for each value of the iterable. */\n  forEach(fn: (value: T, index: number) => void) {\n    forEach(this, fn)\n  }\n\n  /** Reduces the iterable to a single value. */\n  reduce<U>(fn: (previous: U, current: T, index: number) => U, first: U) {\n    return reduce(this, fn, first)\n  }\n\n  /** Filters values of the iterable. */\n  filter(fn: (value: T, index: number) => boolean) {\n    return new It(filter(this, fn))\n  }\n\n  /** Maps values of the iterable. */\n  map<U>(fn: (value: T, index: number) => U) {\n    return new It(map(this, fn))\n  }\n\n  /** Concatenates multiple iterables to a single one. */\n  concat<U>(...its: Iterable<U>[]) {\n    return new It(concat<T | U>(this, ...its))\n  }\n\n  /** Repeatedly yields values from the iterable. */\n  repeat() {\n    return new It(repeat(this))\n  }\n\n  /** Takes some amount values from the iterable. */\n  take(amount: number) {\n    return new It(take(this, amount))\n  }\n\n  /** Drops some amount values from the iterable. */\n  drop(amount: number) {\n    return new It(drop(this, amount))\n  }\n}\n"],"names":["unwrap","it","Symbol","iterator","wrap","[object Object]","next","forEach","fn","i","value","reduce","first","acc","filter","map","concat","its","repeat","always","loop","generate","sequence","range","start","stop","Infinity","step","number","match","input","regexp","exec","take","amount","itʹ","done","drop","_","uc.forEach","uc.reduce","uc.filter","uc.map","uc.sequence","uc.range","uc.match","uc.take","uc.drop","It","this","bind","uncurried","curried"],"mappings":"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"}