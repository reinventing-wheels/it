"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uncurried_1 = require("./functions/uncurried");
const uncurried_2 = require("./functions/uncurried");
const uncurried = require("./functions/uncurried");
const curried = require("./functions/curried");
exports.it = (it) => new It(it);
class It {
    constructor(it) {
        this[Symbol.iterator] = it[Symbol.iterator].bind(it);
    }
    /** Repeatedly yields the same value. */
    static repeat(value) {
        return new It(uncurried_2.repeat(value));
    }
    /** Loops a generator function. */
    static loop(fn) {
        return new It(uncurried_2.loop(fn));
    }
    /** Yields values generated by a function. */
    static generate(fn) {
        return new It(uncurried_2.generate(fn));
    }
    /** Yields a sequence of values derived from previous values. */
    static sequence(fn, first) {
        return new It(uncurried_2.sequence(fn, first));
    }
    /** Yields a sequence of monotonically increasing numbers. */
    static range(start, stop, step) {
        return new It(uncurried_2.range(start, stop, step));
    }
    /** Yields a sequence of matches. */
    static match(input, regexp) {
        return new It(uncurried_2.match(input, regexp));
    }
    /** Casts the iterable to other data structure. */
    cast(fn) {
        return fn(this);
    }
    /** Calls a function for each value of the iterable. */
    forEach(fn) {
        uncurried_1.forEach(this, fn);
    }
    /** Reduces the iterable to a single value. */
    reduce(fn, first) {
        return uncurried_1.reduce(this, fn, first);
    }
    /** Filters values of the iterable. */
    filter(fn) {
        return new It(uncurried_1.filter(this, fn));
    }
    /** Maps values of the iterable. */
    map(fn) {
        return new It(uncurried_1.map(this, fn));
    }
    /** Concatenates multiple iterables to a single one. */
    concat(...its) {
        return new It(uncurried_1.concat(this, ...its));
    }
    /** Yields values from the iterable in cycle. */
    cycle() {
        return new It(uncurried_1.cycle(this));
    }
    /** Zips multiple iterables to a single one. */
    zip(...its) {
        return new It(uncurried_1.zip(this, ...its));
    }
    /** Takes some amount of values from the iterable. */
    take(amount) {
        return new It(uncurried_1.take(this, amount));
    }
    /** Drops some amount of values from the iterable. */
    drop(amount) {
        return new It(uncurried_1.drop(this, amount));
    }
}
It.uncurried = uncurried;
It.curried = curried;
exports.It = It;
