import { Callback, Reducer } from '../types';
/** Calls a function for each value of an iterable. */
export declare function forEach<T>(it: Iterable<T>, fn: Callback<T, void>): void;
/** Reduces an iterable to a single value. */
export declare function reduce<T, U>(it: Iterable<T>, fn: Reducer<T, U>, first: U): U;
/** Filters values of an iterable. */
export declare function filter<T>(it: Iterable<T>, fn: Callback<T, boolean>): IterableIterator<T>;
/** Maps values of an iterable. */
export declare function map<T, U>(it: Iterable<T>, fn: Callback<T, U>): IterableIterator<U>;
/** Concatenates multiple iterables to a single one. */
export declare function concat<T>(...its: Iterable<T>[]): IterableIterator<T>;
/** Flattens an iterable. */
export declare function flatten<T>(it: Iterable<Iterable<T>>): IterableIterator<T>;
/** Yields values from an iterable in cycle. */
export declare function cycle<T>(it: Iterable<T>): IterableIterator<T>;
/** Repeatedly yields the same value. */
export declare function repeat<T>(value: T): IterableIterator<T>;
/** Loops a generator function. */
export declare function loop<T>(fn: (index: number) => Iterable<T>): IterableIterator<T>;
/** Yields values generated by a function. */
export declare function generate<T>(fn: (index: number) => T): IterableIterator<T>;
/** Yields a sequence of values derived from previous values. */
export declare function sequence<T>(fn: Callback<T, T>, first: T): IterableIterator<T>;
/** Yields a sequence of monotonically increasing numbers. */
export declare function range(start?: number, stop?: number, step?: number): IterableIterator<number>;
/** Yields a sequence of matches. */
export declare function match(input: string, regexp: RegExp): IterableIterator<RegExpExecArray>;
/** Yields an iterable by chunks of specified size. */
export declare function chunk<T>(it: Iterable<T>, size: number): IterableIterator<T[]>;
/** Zips multiple iterables to a single one. */
export declare function zip<T>(...its: Iterable<T>[]): IterableIterator<T[]>;
/** Takes specified amount of values from an iterable. */
export declare function take<T>(it: Iterable<T>, amount: number): IterableIterator<T>;
/** Drops specified amount of values from an iterable. */
export declare function drop<T>(it: Iterable<T>, amount: number): IterableIterator<T>;
//# sourceMappingURL=uncurried.d.ts.map