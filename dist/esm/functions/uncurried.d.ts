/** Calls a function for each value of an iterable. */
export declare function forEach<T>(it: Iterable<T>, fn: (value: T, index: number) => void): void;
/** Reduces an iterable to a single value. */
export declare function reduce<T, U>(it: Iterable<T>, fn: (previous: U, current: T, index: number) => U, first: U): U;
/** Filters values of an iterable. */
export declare function filter<T>(it: Iterable<T>, fn: (value: T, index: number) => boolean): IterableIterator<T>;
/** Maps values of an iterable. */
export declare function map<T, U>(it: Iterable<T>, fn: (value: T, index: number) => U): IterableIterator<U>;
/** Concatenates multiple iterables to a single one. */
export declare function concat<T>(...its: Iterable<T>[]): IterableIterator<T>;
/** Repeatedly yields values from the same iterable. */
export declare function repeat<T>(it: Iterable<T>): IterableIterator<T>;
/** Always yields the same value. */
export declare function always<T>(value: T): IterableIterator<T>;
/** Loops a generator function. */
export declare function loop<T>(fn: (index: number) => Iterable<T>): IterableIterator<T>;
/** Yields values generated by a function. */
export declare function generate<T>(fn: (index: number) => T): IterableIterator<T>;
/** Yields a sequence of values derived from previous values. */
export declare function sequence<T>(fn: (previous: T, index: number) => T, first: T): IterableIterator<T>;
/** Yields a sequence of monotonically increasing numbers. */
export declare function range(start?: number, stop?: number, step?: number): IterableIterator<number>;
/** Yields a sequence of matches. */
export declare function match(input: string, regexp: RegExp): IterableIterator<RegExpExecArray>;
/** Takes some amount values from an iterable. */
export declare function take<T>(it: Iterable<T>, amount: number): IterableIterator<T>;
/** Drops some amount values from an iterable. */
export declare function drop<T>(it: Iterable<T>, amount: number): IterableIterator<T>;
