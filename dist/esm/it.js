import { forEach, reduce, filter, map, concat, repeat, take, drop } from './functions/uncurried';
import { always, loop, generate, sequence, range, match } from './functions/uncurried';
import * as uncurried from './functions/uncurried';
import * as curried from './functions/curried';
export const it = (it) => new It(it);
export class It {
    constructor(it) {
        this[Symbol.iterator] = it[Symbol.iterator].bind(it);
    }
    /** Always yields the same value. */
    static always(value) {
        return new It(always(value));
    }
    /** Loops a generator function. */
    static loop(fn) {
        return new It(loop(fn));
    }
    /** Yields values generated by a function. */
    static generate(fn) {
        return new It(generate(fn));
    }
    /** Yields a sequence of values derived from previous values. */
    static sequence(fn, first) {
        return new It(sequence(fn, first));
    }
    /** Yields a sequence of monotonically increasing numbers. */
    static range(start, stop, step) {
        return new It(range(start, stop, step));
    }
    /** Yields a sequence of matches. */
    static match(input, regexp) {
        return new It(match(input, regexp));
    }
    /** Casts the iterable to other data structure. */
    cast(fn) {
        return fn(this);
    }
    /** Calls a function for each value of the iterable. */
    forEach(fn) {
        forEach(this, fn);
    }
    /** Reduces the iterable to a single value. */
    reduce(fn, first) {
        return reduce(this, fn, first);
    }
    /** Filters values of the iterable. */
    filter(fn) {
        return new It(filter(this, fn));
    }
    /** Maps values of the iterable. */
    map(fn) {
        return new It(map(this, fn));
    }
    /** Concatenates multiple iterables to a single one. */
    concat(...its) {
        return new It(concat(this, ...its));
    }
    /** Repeatedly yields values from the iterable. */
    repeat() {
        return new It(repeat(this));
    }
    /** Takes some amount values from the iterable. */
    take(amount) {
        return new It(take(this, amount));
    }
    /** Drops some amount values from the iterable. */
    drop(amount) {
        return new It(drop(this, amount));
    }
}
It.uncurried = uncurried;
It.curried = curried;
