import * as uc from './functions/uncurried';
import * as c from './functions/curried';
export const it = (it) => new It(it);
export class It {
    constructor(it) {
        this[Symbol.iterator] = it[Symbol.iterator].bind(it);
    }
    /** Repeatedly yields the same value. */
    static repeat(value) {
        return new It(uc.repeat(value));
    }
    /** Loops a generator function. */
    static loop(fn) {
        return new It(uc.loop(fn));
    }
    /** Yields values generated by a function. */
    static generate(fn) {
        return new It(uc.generate(fn));
    }
    /** Yields a sequence of values derived from previous values. */
    static sequence(fn, first) {
        return new It(uc.sequence(fn, first));
    }
    /** Yields a sequence of monotonically increasing numbers. */
    static range(start, stop, step) {
        return new It(uc.range(start, stop, step));
    }
    /** Yields a sequence of matches. */
    static match(input, regexp) {
        return new It(uc.match(input, regexp));
    }
    /** Casts the iterable to other data structure. */
    cast(fn) {
        return fn(this);
    }
    /** Calls a function for each value of the iterable. */
    forEach(fn) {
        uc.forEach(this, fn);
    }
    /** Reduces the iterable to a single value. */
    reduce(fn, first) {
        return uc.reduce(this, fn, first);
    }
    /** Filters values of the iterable. */
    filter(fn) {
        return new It(uc.filter(this, fn));
    }
    /** Maps values of the iterable. */
    map(fn) {
        return new It(uc.map(this, fn));
    }
    /** Concatenates multiple iterables to a single one. */
    concat(...its) {
        return new It(uc.concat(this, ...its));
    }
    /** Flattens the iterable. */
    flatten() {
        return new It(uc.flatten(this));
    }
    /** Yields values from the iterable in cycle. */
    cycle() {
        return new It(uc.cycle(this));
    }
    /** Yields the iterable by chunks of specified size. */
    chunk(size) {
        return new It(uc.chunk(this, size));
    }
    /** Zips multiple iterables to a single one. */
    zip(...its) {
        return new It(uc.zip(this, ...its));
    }
    /** Takes specified amount of values from the iterable. */
    take(amount) {
        return new It(uc.take(this, amount));
    }
    /** Drops specified amount of values from the iterable. */
    drop(amount) {
        return new It(uc.drop(this, amount));
    }
}
It.uncurried = uc;
It.curried = c;
